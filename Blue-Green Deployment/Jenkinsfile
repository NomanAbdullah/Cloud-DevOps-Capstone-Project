pipeline {
	agent any
	stages {

		stage('Stage 1 - Linting the HTML file') {
			steps {
				sh 'tidy -q -e *.html'
			}
		}
		
		stage('Stage 2 - Building a Docker Image') {
			steps {
				withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'dockerhub', usernameVariable: 'DKR_USERNAME', passwordVariable: 'DKR_PASSWORD']]){
					sh '''
						docker build -t nomanpc/capstoneproject .
					'''
				}
			}
		}

		stage('Stage 3 - Pushing the Image To DockerHub') {
			steps {
				withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'dockerhub', usernameVariable: 'DKR_USERNAME', passwordVariable: 'DKR_PASSWORD']]){
					sh '''
						docker login -u $DKR_USERNAME -p $DKR_PASSWORD
						docker push nomanpc/capstoneproject
					'''
				}
			}
		}

		stage('Stage 4 - Setting the Current kubectl Context') {
			steps {
				withAWS(region:'us-east-1', credentials:'eks_cred') {
					sh '''
						kubectl config use-context arn:aws:eks:us-east-1:xxxxxxxxxxxx:cluster/capstone-cluster
					'''
				}
			}
		}

		stage('Stage 5 - Deploying a Blue Container') {
			steps {
				withAWS(region:'us-east-1', credentials:'eks_cred') {
					sh '''
						kubectl apply -f ./blue-controller.json
					'''
				}
			}
		}

		stage('Stage 6 - Deploying a Green Container') {
			steps {
				withAWS(region:'us-east-1', credentials:'eks_cred') {
					sh '''
						kubectl apply -f ./green-controller.json
					'''
				}
			}
		}

		stage('Stage 7 - Creating a Service in the Cluster-Blue') {
			steps {
				withAWS(region:'us-east-1', credentials:'eks_cred') {
					sh '''
						kubectl apply -f ./blue-service.json
					'''
				}
			}
		}

		stage('Stage 8 - Waiting for User Interaction') {
            steps {
                input "Would you like to redirect the traffic to Green?"
            }
        }

		stage('Stage 9 - Creating a Service in the Cluster-Green') {
			steps {
				withAWS(region:'us-east-1', credentials:'eks_cred') {
					sh '''
						kubectl apply -f ./green-service.json
					'''
				}
			}
		}

	}
}
